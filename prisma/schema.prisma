generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String         @id @default(cuid())
  email           String         @unique
  emailVerified   DateTime?
  password        String?
  name            String?
  firstName       String?
  lastName        String?
  phone           String?
  role            UserRole       @default(CANDIDATE)
  experienceLevel ExperienceLevel @default(BEGINNER)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  accounts        Account[]
  sessions        Session[]
  jobs            Job[]          // Jobs posted by recruiters
  applications    Application[]  // Applications submitted by candidates
  resumes         Resume[]       // Resumes uploaded by candidates

  // AGENCY RELATIONS
  agencyClients       Client[]      @relation("AgencyClients")        // Clients managed by this recruiter
  placements           Placement[]  @relation("PlacementRecruiter")   // Placements made by this recruiter
  placedCandidates     Placement[]  @relation("PlacedCandidates")     // Candidates placed by agency

  // VIDEO INTERVIEW RELATIONS
  candidateInterviews  VideoInterview[] @relation("InterviewCandidate")  // Interviews as candidate
  interviewerInterviews VideoInterview[] @relation("InterviewInterviewer") // Interviews as interviewer
  interviewAvailability InterviewAvailability[] @relation("AvailabilityInterviewer") // Interview availability

  // NOTIFICATION RELATIONS
  sentNotifications   Notification[] @relation("NotificationRecipient") // Notifications sent to this user
  pushTokens          PushToken[]    @relation("PushTokenUser")        // Mobile push tokens

  // TEMPLATE RELATIONS
  createdTemplates     InterviewTemplate[] @relation("TemplateCreator") // Interview templates created
}

model Job {
  id                  String            @id @default(cuid())
  title               String
  description         String            @db.Text
  descriptionEmbedding Json?            // OpenAI embedding for semantic search (1536-dim vector)
  category            JobCategory
  location            String
  company             String
  contactEmail        String
  contactPhone        String?
  salary              String?
  workingHours        String            @default("37-40 ore/săptămână")
  contractType        ContractType      @default(FULL_TIME)
  languageRequirement LanguageLevel     @default(BASIC)
  experienceRequired  ExperienceLevel   @default(BEGINNER)
  seasonalWork        Boolean           @default(false)
  housingProvided     Boolean           @default(false)
  transportProvided   Boolean           @default(false)
  requirements        String            @db.Text
  benefits            String?           @db.Text
  startDate           DateTime?
  endDate             DateTime?
  isActive            Boolean           @default(true)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  recruiterId         String
  recruiter           User              @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
  applications        Application[]

  // AGENCY RELATIONS
  placements          Placement[]       // Successful placements for this job

  // VIDEO INTERVIEW RELATIONS
  videoInterviews     VideoInterview[]  // Video interviews for this job

  // NOTIFICATION RELATIONS
  notifications       Notification[]    // Notifications related to this job
}

model Application {
  id                String              @id @default(cuid())
  status            ApplicationStatus   @default(PENDING)
  coverLetter       String?             @db.Text
  appliedAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  candidateId       String
  candidate         User                @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  jobId             String
  job               Job                 @relation(fields: [jobId], references: [id], onDelete: Cascade)
  resumeId          String?
  resume            Resume?             @relation(fields: [resumeId], references: [id])
  score             Score?

  // NOTIFICATION RELATIONS
  notifications     Notification[]     // Notifications related to this application

  @@unique([candidateId, jobId])
}

model Resume {
  id                String      @id @default(cuid())
  originalName      String
  cloudStoragePath  String      // S3 key for the uploaded PDF
  content           String?     @db.Text  // Extracted text from PDF for embedding
  contentEmbedding  Json?       // OpenAI embedding for semantic search (1536-dim vector)
  uploadedAt        DateTime    @default(now())

  userId            String
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications      Application[]
  scores            Score[]
}

model Score {
  id            String      @id @default(cuid())
  overallScore  Int         // Score from 1-100
  pros          String[]    // Exactly 2 pros
  cons          String[]    // Exactly 2 cons
  feedback      String?     @db.Text
  scoredAt      DateTime    @default(now())

  applicationId String      @unique
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  resumeId      String
  resume        Resume      @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// AGENCY RECRUITMENT MODELS

model Client {
  id              String       @id @default(cuid())
  name            String
  country         Countries
  industry        Industry
  contactPerson   String
  email           String       @unique
  phone           String
  website         String?
  address         String?
  status          ClientStatus @default(PROSPECT)
  commissionRate  Decimal      @default(0.15) // 15% default
  notes           String?      @db.Text
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  recruiterId     String
  recruiter       User         @relation("AgencyClients", fields: [recruiterId], references: [id])
  placements      Placement[]
  payments        Payment[]
  companyLeads    CompanyLead[] @relation("ConvertedFromLead")

  @@unique([email, recruiterId])
}

model Placement {
  id            String            @id @default(cuid())
  candidateId   String
  candidate     User              @relation("PlacedCandidates", fields: [candidateId], references: [id])
  clientId      String
  client        Client            @relation(fields: [clientId], references: [id])
  jobId         String
  job           Job               @relation(fields: [jobId], references: [id])
  country       Countries
  placementDate DateTime          @default(now())
  startSalary   Decimal
  commission    Decimal // Auto-calculated: startSalary x client.commissionRate
  status        PlacementStatus   @default(PLACED)
  notes         String?           @db.Text
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  recruiterId   String
  recruiter     User              @relation("PlacementRecruiter", fields: [recruiterId], references: [id])

  @@unique([candidateId, jobId])
}

model Payment {
  id        String      @id @default(cuid())
  clientId  String
  client    Client      @relation(fields: [clientId], references: [id])
  amount    Decimal
  period    String // e.g., "2024-Q1", "2024-09"
  status    PaymentStatus @default(PENDING)
  notes     String?     @db.Text
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model CompanyLead {
  id           String        @id @default(cuid())
  name         String
  website      String
  country      Countries
  industry     Industry
  email        String?
  phone        String?
  contactPerson String?
  size         CompanySize?
  status       LeadStatus    @default(NEW)

  // AI-powered lead scoring
  fitScore     Int? // 0-100: How suitable for Romanian recruitment
  leadType     LeadType   // RELIABLE, PAYS_RELOC, UNRELIABLE, GROWING, SHRINKING

  // Conversion tracking
  sourcedFrom  String? // e.g., "web_scraping", "social_media", "referral"
  contactedAt  DateTime?
  firstResponse DateTime?
  lastContact  DateTime?

  // Recruitment insights
  openPositions Int @default(0)
  paysRelocation Boolean @default(false)
  requiresLanguage String? // "Basic English", "Danish required", etc
  visaHelp       Boolean @default(false)
  housingHelp    Boolean @default(false)

  notes         String? @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  convertedClientId String? // If this lead becomes a paying client
  convertedClient   Client? @relation("ConvertedFromLead", fields: [convertedClientId], references: [id])

  @@unique([website])
}

// NEW AGENCY ENUMS

enum Countries {
  DENMARK      // Danemarca
  GERMANY      // Germania
  NETHERLANDS  // Olanda
  FRANCE       // Franța
}

enum Industry {
  AGRICULTURE         // Agricultură
  FORESTRY           // Silvicultură
  FOOD_PROCESSING    // Procesare alimentară
  HORTICULTURE       // Horticultură
  LIVESTOCK_FARMING  // Creșterea animalelor
  DAIRY_FARMING      // Fermă lăptărie
  GREENHOUSES        // Sere
  LANDSCAPING        // Amenajări peisagistice
  OTHER
}

enum CompanySize {
  SMALL    // 1-10 angajați
  MEDIUM   // 11-50 angajați
  LARGE    // 51-200 angajați
  ENTERPRISE // 200+ angajați
}

enum ClientStatus {
  PROSPECT    // Prospect găsit via scraping
  CONTACTED   // Contactat, în discuții
  INTERESTED  // Arată interes
  ACTIVE      // Client activ, plătește comision
  INACTIVE    // Client inactiv
  CANCELLED   // Contract anulat
}

enum PlacementStatus {
  PLACED        // Plasat cu succes
  ON_PROBATION  // În perioadă de probă
  CONFIRMED     // Confirmat permanent
  TERMINATED    // Reziliat
}

enum PaymentStatus {
  PENDING     // În așteptare
  OVERDUE     // Întârziat
  PAID        // Plătit
  CANCELLED   // Anulat
}

enum LeadStatus {
  NEW           // Lead nou găsit
  CONTACTING   // În proces de contactare
  RESPONDED     // A răspuns
  MEETING       // Programată întâlnire
  CONTRACTING   // În контрактări
  CONVERTED     // Convertit în client
  LOST         // Perduto
  UNQUALIFIED   // Nu califică
}

enum LeadType {
  RELIABLE      // Companie de încredere
  UNRELIABLE    // Istoric problematic
  PAYS_RELOC    // Plătește mutarea
  FAST_HIRING   // Angajează rapid
  SEASONAL      // Doar sezonal
  GROWING       // În creștere
  SHRINKING     // Se reduce
  HIGH_TURNOVER // Turnover mare
  LOW_TURNOVER  // Turnover mic
}

// VIDEO INTERVIEW SYSTEM

model VideoInterview {
  id                String              @id @default(cuid())
  scheduledAt       DateTime
  duration          Int               // Minutes
  status            InterviewStatus   @default(SCHEDULED)
  meetingId         String            @unique // Zoom/Teams/WebRTC room ID
  meetingPassword   String?
  meetingUrl        String            // Join URL
  recordingUrl      String?           // Cloud storage URL for recording
  recordingKey      String?           // S3 key
  aiTranscription   String?           @db.Text
  aiNotes           String?           @db.Text
  aiScore           Int?              // 0-100 AI assessment
  interviewerNotes  String?           @db.Text
  candidateFeedback String?           @db.Text

  jobId             String
  job               Job               @relation(fields: [jobId], references: [id])

  candidateId       String
  candidate         User              @relation("InterviewCandidate", fields: [candidateId], references: [id])

  interviewerId     String?
  interviewer       User?             @relation("InterviewInterviewer", fields: [interviewerId], references: [id])

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  interviewQuestions InterviewQuestion[]
  interviewAnalysis  InterviewAnalysis? // AI analysis of this interview

  // NOTIFICATION RELATIONS
  notifications      Notification[]    // Notifications related to this interview
}

model InterviewQuestion {
  id                String      @id @default(cuid())
  question          String
  expectedAnswer    String?     @db.Text
  aiAssessment      String?     @db.Text
  candidateResponse String?     @db.Text
  score             Int?        // 0-10
  timestamp         DateTime?   // When question was asked during interview

  interviewId       String
  interview         VideoInterview @relation(fields: [interviewId], references: [id], onDelete: Cascade)

  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model InterviewTemplate {
  id          String      @id @default(cuid())
  name        String
  description String?
  category    String      // industry/category
  language    String      @default("en")

  questions   String[]    // Pre-defined questions array
  duration    Int         // Suggested duration in minutes

  createdBy   String
  createdByUser User      @relation("TemplateCreator", fields: [createdBy], references: [id])

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([name, category, language])
}

// AI Interview Analysis
model InterviewAnalysis {
  id                  String      @id @default(cuid())
  interviewId         String      @unique
  interview           VideoInterview @relation(fields: [interviewId], references: [id], onDelete: Cascade)

  overallScore        Int         // 0-100
  communicationScore  Int         // 0-100
  technicalSkillScore Int         // 0-100
  culturalFitScore    Int         // 0-100
  motivationScore     Int         // 0-100

  strengths           String[]    // Key strengths identified
  weaknesses          String[]    // Areas for improvement
  recommendations     String[]    // Hiring recommendations

  personalityTraits   Json?       // AI-detected personality traits
  sentimentAnalysis   Json?       // Overall sentiment during interview

  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

// Interview Availability
model InterviewAvailability {
  id             String      @id @default(cuid())

  date           DateTime    // Date of availability
  startTime      String      // "09:00"
  endTime        String      // "17:00"
  timeZone       String      @default("Europe/Bucharest")

  isAvailable    Boolean     @default(true)
  bookedSlots    DateTime[]  // Array of booked time slots

  interviewerId  String
  interviewer    User        @relation("AvailabilityInterviewer", fields: [interviewerId], references: [id], onDelete: Cascade)

  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@unique([interviewerId, date])
}

// Notification History
model Notification {
  id          String            @id @default(cuid())
  type        NotificationType
  title       String
  message     String            @db.Text
  priority    NotificationPriority @default(MEDIUM)
  read        Boolean           @default(false)

  // Recipient
  recipientId String
  recipient   User              @relation("NotificationRecipient", fields: [recipientId], references: [id], onDelete: Cascade)

  // Related entities (optional)
  jobId       String?
  job         Job?              @relation(fields: [jobId], references: [id])
  applicationId String?
  application Application?      @relation(fields: [applicationId], references: [id])
  interviewId String?
  interview   VideoInterview?   @relation(fields: [interviewId], references: [id])

  sentAt      DateTime          @default(now())
  readAt      DateTime?

  // Metadata
  data        Json?             // Additional notification data
}

// Mobile Push Tokens
model PushToken {
  id          String      @id @default(cuid())
  token       String      @unique
  platform    PlatformType // ios, android, web
  deviceId    String?     // Optional device identifier

  userId      String
  user        User        @relation("PushTokenUser", fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([userId, token])
}

// NEW ENUMS FOR VIDEO SYSTEM

enum InterviewStatus {
  SCHEDULED     // Programat
  CONFIRMED     // Confirmat de candidat
  IN_PROGRESS   // În desfășurare
  COMPLETED     // Finalizat
  CANCELLED     // Anulat
  NO_SHOW       // Candidat nu a apărut
}

enum NotificationType {
  APPLICATION_UPDATE
  JOB_MATCH
  INTERVIEW_SCHEDULED
  INTERVIEW_REMINDER
  PLACEMENT_CONFIRMED
  MESSAGE_RECEIVED
  SYSTEM_MAINTENANCE
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PlatformType {
  IOS
  ANDROID
  WEB
}

// ENHANCED SCRAPING LOG

model ScrapingLog {
  id            String       @id @default(cuid())
  date          DateTime     @default(now())
  country       Countries    // Which country's companies were scraped
  companiesCount Int
  newLeadsCount Int
  emailsFound    Int
  emailsSent     Int
  errors         String?      @db.Text
  duration       Int // Minutes it took
  pagesScraped   Int
  createdAt      DateTime    @default(now())

  // AI analysis
  locationTrends String? // AI insights on locations with most opportunities
  industryTrends String? // AI insights on growing industries
  successRate    Decimal? // Estimated conversion potential
}

// AI Configuration
model AIConfig {
  id          String   @id @default(cuid())
  provider    String   @default("openrouter") // openrouter, openai, etc.
  modelName   String   @default("google/gemma-3n-e4b-it") // Embedding model name
  apiKey      String?  // API key for the provider
  baseURL     String?  // Custom base URL if needed
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([provider, modelName])
}

// Enums
enum UserRole {
  CANDIDATE
  AGENCY_OWNER  // The agency owner/admin who manages the recruitment business
  ADMIN         // System administrator
}

enum ExperienceLevel {
  BEGINNER      // Începător
  INTERMEDIATE  // Intermediar
  ADVANCED      // Avansat
  EXPERT        // Expert
}

enum JobCategory {
  FORESTRY           // Silvicultură
  AGRICULTURE        // Agricultură
  GREENHOUSE         // Seră
  FRUIT_HARVESTING   // Recoltare fructe
  ANIMAL_CARE        // Îngrijire animale
  TREE_PLANTING      // Plantare arbori
  LOGGING            // Exploatare forestieră
  PARK_MAINTENANCE   // Întreținere parcuri
}

enum ContractType {
  FULL_TIME          // Normă întreagă
  PART_TIME          // Program parțial
  SEASONAL           // Sezonier
  TEMPORARY          // Temporar
}

enum LanguageLevel {
  NONE              // Fără cerințe
  BASIC             // De bază
  INTERMEDIATE      // Intermediar
  ADVANCED          // Avansat
  NATIVE            // Nativ
}

enum ApplicationStatus {
  PENDING           // În așteptare
  REVIEWING         // În evaluare
  INTERVIEWED       // Intervievat
  ACCEPTED          // Acceptat
  REJECTED          // Respins
  WITHDRAWN         // Retras
}
