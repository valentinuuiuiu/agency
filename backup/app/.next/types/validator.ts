// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../app/evaluare-cv/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/evaluare-cv">> = Specific
  const handler = {} as typeof import("../../app/evaluare-cv/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/ghid-danemarca/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/ghid-danemarca">> = Specific
  const handler = {} as typeof import("../../app/ghid-danemarca/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/locuri-verificate/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/locuri-verificate">> = Specific
  const handler = {} as typeof import("../../app/locuri-verificate/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/my-app/app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/my-app/app">> = Specific
  const handler = {} as typeof import("../../app/my-app/app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/applications/[id]/score/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/applications/[id]/score">> = Specific
  const handler = {} as typeof import("../../app/api/applications/[id]/score/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/applications/[id]/status/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/applications/[id]/status">> = Specific
  const handler = {} as typeof import("../../app/api/applications/[id]/status/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/applications/check/[jobId]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/applications/check/[jobId]">> = Specific
  const handler = {} as typeof import("../../app/api/applications/check/[jobId]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/applications/received/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/applications/received">> = Specific
  const handler = {} as typeof import("../../app/api/applications/received/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/applications/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/applications">> = Specific
  const handler = {} as typeof import("../../app/api/applications/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/applications/sent/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/applications/sent">> = Specific
  const handler = {} as typeof import("../../app/api/applications/sent/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/auth/[...nextauth]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/[...nextauth]">> = Specific
  const handler = {} as typeof import("../../app/api/auth/[...nextauth]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/chat/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/chat">> = Specific
  const handler = {} as typeof import("../../app/api/chat/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/contact/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/contact">> = Specific
  const handler = {} as typeof import("../../app/api/contact/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/dashboard/stats/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/dashboard/stats">> = Specific
  const handler = {} as typeof import("../../app/api/dashboard/stats/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/jobs/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/jobs">> = Specific
  const handler = {} as typeof import("../../app/api/jobs/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/ping/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/ping">> = Specific
  const handler = {} as typeof import("../../app/api/ping/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/resume/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/resume/[id]">> = Specific
  const handler = {} as typeof import("../../app/api/resume/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/resume/list/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/resume/list">> = Specific
  const handler = {} as typeof import("../../app/api/resume/list/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/resume/upload/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/resume/upload">> = Specific
  const handler = {} as typeof import("../../app/api/resume/upload/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/signup/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/signup">> = Specific
  const handler = {} as typeof import("../../app/api/signup/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/my-app/app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/my-app/app">> = Specific
  const handler = {} as typeof import("../../app/my-app/app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
